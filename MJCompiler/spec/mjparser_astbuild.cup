package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONT, THIS, SUPER, GOTO, RECORD, PLUS, MINUS, MUL, DIV, MOD;
terminal EQEQ, NOTEQUAL, GT, GTE, LT, LTE, AND, OR, EQUAL, INC, DEC, SEMI, COLON, COMMA, DOT;
terminal LPAREN, RPAREN, LSQBR, RSQBR, LBRACE, RBRACE;
terminal Integer NUMBER;
terminal Integer BOOL;
terminal String IDENT;
terminal Character CHAR;
terminal CLASS;

nonterminal Program Program;
nonterminal List List;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDeclWrapper ConstDeclWrapper;
nonterminal VarDeclWrapper VarDeclWrapper;
nonterminal RecordDeclList RecordDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal RecordDecl RecordDecl;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormPar FormPar;
nonterminal Statement Statement;
nonterminal SingleStatement SingleStatement;
nonterminal Statements Statements;
nonterminal Label Label;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Unary Unary;
nonterminal Relop Relop;
nonterminal ListVarDeclWrapper ListVarDeclWrapper;

nonterminal ProgramName ProgramName;
nonterminal RecordDeclName RecordDeclName;
nonterminal DoWhileHelp DoWhileHelp;
nonterminal ActParsHelp ActParsHelp;

nonterminal rs.etf.pp1.symboltable.concepts.Struct AssignWrapper, Factor, FactorWrapper, Term, ExprMore, Expr, Condition, CondTerm, CondFact, Type;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorMore, DesignatorMoreElem, DesignatorArrName, DesignatorWithMoreName, MethodRet, MethodName;

precedence left ELSE;

Program 		::= (Program) PROG ProgramName:P1 List:L2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, L2, M3); RESULT.setLine(P1left); :};

ProgramName		::= (ProgramName) IDENT:I1 {: RESULT=new ProgramName(I1); RESULT.setLine(I1left); :};

List 			::= (ListConst) List:L1 ConstDeclWrapper:C2 {: RESULT=new ListConst(L1, C2); RESULT.setLine(L1left); :}
				|
				(ListVar) List:L1 VarDeclWrapper:V2 {: RESULT=new ListVar(L1, V2); RESULT.setLine(L1left); :}
				|
				(ListRecord) List:L1 RecordDecl:R2 {: RESULT=new ListRecord(L1, R2); RESULT.setLine(L1left); :}
				|
				(NoList) {: RESULT=new NoList(); :} /* epsilon */
				;

MethodDeclList	::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;

ConstDeclWrapper ::= (ConstDeclWrapperClass) CONST Type:T1 ConstDeclList:C2 SEMI {: RESULT=new ConstDeclWrapperClass(T1, C2); RESULT.setLine(T1left); :}
				 |
				 (ConstDeclWrapperError) CONST error SEMI:l /* npr const ; ili const int ; */
				 {: parser.report_error("Oporavak od greske! Too easy! " + lleft, null); :} {: RESULT=new ConstDeclWrapperError(); :}
				 ;

ConstDeclList	::= (ConstDeclarations) ConstDeclList:C1 COMMA ConstDecl:C2 {: RESULT=new ConstDeclarations(C1, C2); RESULT.setLine(C1left); :}
				|
				(SingleConstDeclaration) ConstDecl:C1 {: RESULT=new SingleConstDeclaration(C1); RESULT.setLine(C1left); :}
				;

ConstDecl		::= (ConstDeclNumber) IDENT:I1 EQUAL NUMBER:N2 {: RESULT=new ConstDeclNumber(I1, N2); RESULT.setLine(I1left); :} 
				|
				(ConstDeclBool) IDENT:I1 EQUAL BOOL:B2 {: RESULT=new ConstDeclBool(I1, B2); RESULT.setLine(I1left); :}
				|
				(ConstDeclChar) IDENT:I1 EQUAL CHAR:C2 {: RESULT=new ConstDeclChar(I1, C2); RESULT.setLine(I1left); :}
				|
				(ConstDeclError) error:l /* npr const int x y, z;*/
				 {: parser.report_error("Oporavak od greske! Too easy! " + lleft, null); :} {: RESULT=new ConstDeclError(); :}
				;

VarDeclWrapper	::= (VarDeclWrapper) Type:T1 VarDeclList:V2 SEMI {: RESULT=new VarDeclWrapper(T1, V2); RESULT.setLine(T1left); :};

ListVarDeclWrapper ::= (IsListVarDeclWrapper) ListVarDeclWrapper:L1 VarDeclWrapper:V2 {: RESULT=new IsListVarDeclWrapper(L1, V2); RESULT.setLine(L1left); :}
				   |
				   (NoListVarDeclWrapper) {: RESULT=new NoListVarDeclWrapper(); :} /* epsilon */
				   ;

VarDeclList		::= (VarDeclarations) VarDeclList:V1 COMMA VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
				|
				(SingleVarDecl) VarDecl:V1 {: RESULT=new SingleVarDecl(V1); RESULT.setLine(V1left); :}
				;
				
VarDecl			::= (NormalVarDecl) IDENT:I1 {: RESULT=new NormalVarDecl(I1); RESULT.setLine(I1left); :}
				|
				(ArrayVarDecl) IDENT:I1 LSQBR RSQBR {: RESULT=new ArrayVarDecl(I1); RESULT.setLine(I1left); :}
				;

/*
RecordDeclList	::= (RecordDeclList) RecordDeclList RecordDecl
				|
				(SingleRecordDecl) RecordDecl
				;
*/

MethodDecl		::= (MethDeclParams) MethodRet:M1 MethodName:M2 LPAREN FormPars:F3 RPAREN ListVarDeclWrapper:L4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethDeclParams(M1, M2, F3, L4, S5); RESULT.setLine(M1left); :}
				|
				(MethDeclNoParams) MethodRet:M1 MethodName:M2 LPAREN RPAREN ListVarDeclWrapper:L3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethDeclNoParams(M1, M2, L3, S4); RESULT.setLine(M1left); :}
				/*
				|
				(MethDeclParamsError) Type MethodName LPAREN error RPAREN:l ListVarDeclWrapper LBRACE StatementList RBRACE
				{: parser.report_error("Oporavak od greske! Too easy! " + lleft, null); :}
				|
				(MethDeclVoidParamsError) VOID MethodName LPAREN error RPAREN:l ListVarDeclWrapper LBRACE StatementList RBRACE
				{: parser.report_error("Oporavak od greske! Too easy! " + lleft, null); :}
				*/
				;
				
MethodName		::= (MethodName) IDENT:I1 {: RESULT=new MethodName(I1); RESULT.setLine(I1left); :};

MethodRet		::= (MethodRetVoid) VOID {: RESULT=new MethodRetVoid(); :}
				|
				(MethodRetType) Type:T1 {: RESULT=new MethodRetType(T1); RESULT.setLine(T1left); :}
				;

Type			::= (Type) IDENT:I1 {: RESULT=new Type(I1); RESULT.setLine(I1left); :};
				
RecordDecl		::= (RecordDecl) RECORD RecordDeclName:R1 LBRACE ListVarDeclWrapper:L2 RBRACE {: RESULT=new RecordDecl(R1, L2); RESULT.setLine(R1left); :};

RecordDeclName	::= (RecordDeclName) IDENT:I1 {: RESULT=new RecordDeclName(I1); RESULT.setLine(I1left); :};

FormPars		::= (FormParameters) FormPars:F1 COMMA FormPar:F2 {: RESULT=new FormParameters(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormPars) FormPar:F1 {: RESULT=new SingleFormPars(F1); RESULT.setLine(F1left); :}
				;

FormPar			::= (FormalParameter) Type:T1 IDENT:I2 {: RESULT=new FormalParameter(T1, I2); RESULT.setLine(T1left); :}
				|
				(FormalParameterArray) Type:T1 IDENT:I2 LSQBR RSQBR {: RESULT=new FormalParameterArray(T1, I2); RESULT.setLine(T1left); :}
				|
				(FormalParameterError) error:l
				{: parser.report_error("Oporavak od greske! Too easy! " + lleft, null); :} {: RESULT=new FormalParameterError(); :}
				;
				
StatementList	::= (StatementListExists) StatementList:S1 Statement:S2 {: RESULT=new StatementListExists(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
				;

Statement		::= (StatementWithLabel) Label:L1 COLON SingleStatement:S2 {: RESULT=new StatementWithLabel(L1, S2); RESULT.setLine(L1left); :}
				|
				(StatementWithSingleStatement) SingleStatement:S1 {: RESULT=new StatementWithSingleStatement(S1); RESULT.setLine(S1left); :}
				|
				(StatementWithStatements) Statements:S1 {: RESULT=new StatementWithStatements(S1); RESULT.setLine(S1left); :}
				;
				
Label			::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

DoWhileHelp		::= (DoWhileHelp) DO {: RESULT=new DoWhileHelp(); :};

SingleStatement	::=(DesignatorSingleStatement) DesignatorStatement:D1 {: RESULT=new DesignatorSingleStatement(D1); RESULT.setLine(D1left); :}
				|
				(IfElseSingleStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseSingleStatement(C1, S2, S3); RESULT.setLine(C1left); :}
				|
				(IfSingleStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IfSingleStatement(C1, S2); RESULT.setLine(C1left); :}
				|
				(DoWhileSingleStatement) DoWhileHelp:D1 Statement:S2 WHILE LPAREN Condition:C3 RPAREN SEMI {: RESULT=new DoWhileSingleStatement(D1, S2, C3); RESULT.setLine(D1left); :}
				|
				(BreakSingleStatement) BREAK SEMI {: RESULT=new BreakSingleStatement(); :}
				|
				(ContinueSingleStatement) CONT SEMI {: RESULT=new ContinueSingleStatement(); :}
				|
				(ReturnExprSingleStatement) RETURN Expr:E1 SEMI {: RESULT=new ReturnExprSingleStatement(E1); RESULT.setLine(E1left); :}
				|
				(ReturnSingleStatement) RETURN SEMI {: RESULT=new ReturnSingleStatement(); :}
				|
				(ReadSingleStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadSingleStatement(D1); RESULT.setLine(D1left); :}
				|
				(PrintNumberSingleStatement) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintNumberSingleStatement(E1, N2); RESULT.setLine(E1left); :}
				|
				(PrintSingleStatement) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintSingleStatement(E1); RESULT.setLine(E1left); :}
				|
				(GotoSingleStatement) GOTO IDENT:I1 SEMI {: RESULT=new GotoSingleStatement(I1); RESULT.setLine(I1left); :}
				;
				
Statements		::= (Statements) LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :};



DesignatorStatement ::= (DesStmAssign) Designator:D1 AssignWrapper:A2 {: RESULT=new DesStmAssign(D1, A2); RESULT.setLine(D1left); :}
					|
					(DesStmFuncParams) Designator:D1 ActParsHelp:A2 ActPars:A3 RPAREN SEMI {: RESULT=new DesStmFuncParams(D1, A2, A3); RESULT.setLine(D1left); :}
					|
					(DesStmFunc) Designator:D1 LPAREN RPAREN SEMI {: RESULT=new DesStmFunc(D1); RESULT.setLine(D1left); :}
					|
					(DesStmInc) Designator:D1 INC SEMI {: RESULT=new DesStmInc(D1); RESULT.setLine(D1left); :}
					|
					(DesStmDec) Designator:D1 DEC SEMI {: RESULT=new DesStmDec(D1); RESULT.setLine(D1left); :}
					;
					
ActParsHelp			::= (ActParsHelp) LPAREN {: RESULT=new ActParsHelp(); :};
					
Condition		::= (MultipleCondition) Condition:C1 OR CondTerm:C2 {: RESULT=new MultipleCondition(C1, C2); RESULT.setLine(C1left); :}
				|
				(SingleCondition) CondTerm:C1 {: RESULT=new SingleCondition(C1); RESULT.setLine(C1left); :}
				|
				(ConditionError) error:l
				{: parser.report_error("Oporavak od greske! Too easy! Greska u if uslovu! " + lleft, null); :} {: RESULT=new ConditionError(); :}
				;
								
ExprMore		::= (ThereIsMoreExpr) ExprMore:E1 Addop:A2 Term:T3 {: RESULT=new ThereIsMoreExpr(E1, A2, T3); RESULT.setLine(E1left); :}
				|
				(NoMoreExpr) {: RESULT=new NoMoreExpr(); :} /* epsilon */
				;
		
Expr			::= (Expr) Term:T1 ExprMore:E2 {: RESULT=new Expr(T1, E2); RESULT.setLine(T1left); :};
				
Addop			::= (Plus) PLUS {: RESULT=new Plus(); :}
				|
				(Minus) MINUS {: RESULT=new Minus(); :}
				;
				
Designator		::= (DesignatorSimple) IDENT:I1 {: RESULT=new DesignatorSimple(I1); RESULT.setLine(I1left); :}
				|
				(DesignatorArr) DesignatorArrName:D1 LSQBR Expr:E2 RSQBR {: RESULT=new DesignatorArr(D1, E2); RESULT.setLine(D1left); :}
				|
				(DesignatorWithMore) DesignatorWithMoreName:D1 DesignatorMore:D2 {: RESULT=new DesignatorWithMore(D1, D2); RESULT.setLine(D1left); :}
				|
				(DesignatorArrWithMore) DesignatorMoreElem:D1 DesignatorMore:D2 {: RESULT=new DesignatorArrWithMore(D1, D2); RESULT.setLine(D1left); :}
				;
				
DesignatorArrName ::= (DesignatorArrName) IDENT:I1 {: RESULT=new DesignatorArrName(I1); RESULT.setLine(I1left); :};

DesignatorWithMoreName ::= (DesignatorWithMoreName) IDENT:I1 {: RESULT=new DesignatorWithMoreName(I1); RESULT.setLine(I1left); :};

DesignatorMoreElem ::= (DesignatorMoreElem) DesignatorArrName:D1 LSQBR Expr:E2 RSQBR {: RESULT=new DesignatorMoreElem(D1, E2); RESULT.setLine(D1left); :};
	
DesignatorMore ::= (DesigMoreDot) DOT IDENT:I1 {: RESULT=new DesigMoreDot(I1); RESULT.setLine(I1left); :}
				|
				(DesigMoreDotArr) DOT DesignatorArrName:D1 LSQBR Expr:E2 RSQBR {: RESULT=new DesigMoreDotArr(D1, E2); RESULT.setLine(D1left); :}
				|
				(DesigMoreDotList) DesignatorMore:D1 DOT IDENT:I2 {: RESULT=new DesigMoreDotList(D1, I2); RESULT.setLine(D1left); :}
				|
				(DesigMoreDotArrList) DesignatorMore:D1 DOT DesignatorArrName:D2 LSQBR Expr:E3 RSQBR {: RESULT=new DesigMoreDotArrList(D1, D2, E3); RESULT.setLine(D1left); :}
				;
				
Assignop		::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

/* 
	ASSIGN WRAPPER JE POTENCIJALNO LOSA IDEJA ZA TRECU FAZU! AKO NE BUDE MOGLO VRATI ASSIGNOP U DESIGNATOR STATEMENT
   	I STAVI SAMO U SINGLESTATEMENT ERROR SEMI :( 
 */

AssignWrapper	::= (AssignWrap) Assignop:A1 Expr:E2 SEMI {: RESULT=new AssignWrap(A1, E2); RESULT.setLine(A1left); :}
				|
				(AssignWrapperError) error SEMI:l
				{: parser.report_error("Oporavak od greske! Too easy! Greska pri dodeli vrednosti! " + lleft, null); :} {: RESULT=new AssignWrapperError(); :}
				;

ActPars			::= (MulActPars) ActPars:A1 COMMA Expr:E2 {: RESULT=new MulActPars(A1, E2); RESULT.setLine(A1left); :}
				|
				(SingleActPar) Expr:E1 {: RESULT=new SingleActPar(E1); RESULT.setLine(E1left); :}
				;

CondTerm		::= (MulCondTerm) CondTerm:C1 AND CondFact:C2 {: RESULT=new MulCondTerm(C1, C2); RESULT.setLine(C1left); :}
				|
				(SingleCondTerm) CondFact:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
				;

Term			::= (MulTerms) Term:T1 Mulop:M2 FactorWrapper:F3 {: RESULT=new MulTerms(T1, M2, F3); RESULT.setLine(T1left); :}
				|
				(SingleTerm) FactorWrapper:F1 {: RESULT=new SingleTerm(F1); RESULT.setLine(F1left); :}
				;
				
CondFact		::= (CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :}
				|
				(CondFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :}
				;
				
Mulop			::= (Multiply) MUL {: RESULT=new Multiply(); :}
				|
				(Divide) DIV {: RESULT=new Divide(); :}
				|
				(Mod) MOD {: RESULT=new Mod(); :}
				;

FactorWrapper	::= (FactorWrapper) Unary:U1 Factor:F2 {: RESULT=new FactorWrapper(U1, F2); RESULT.setLine(U1left); :};

Unary			::= (UnaryNegative) MINUS {: RESULT=new UnaryNegative(); :}
				|
				(NoUnary) {: RESULT=new NoUnary(); :} /* epsilon */
				;

Factor			::= (NormalFactor) Designator:D1 {: RESULT=new NormalFactor(D1); RESULT.setLine(D1left); :}
				|
				(FactorWithActPars) Designator:D1 ActParsHelp:A2 ActPars:A3 RPAREN {: RESULT=new FactorWithActPars(D1, A2, A3); RESULT.setLine(D1left); :}
				|
				(FactorWithoutActPars) Designator:D1 LPAREN RPAREN {: RESULT=new FactorWithoutActPars(D1); RESULT.setLine(D1left); :}
				|
				(Num) NUMBER:N1 {: RESULT=new Num(N1); RESULT.setLine(N1left); :}
				|
				(Char) CHAR:C1 {: RESULT=new Char(C1); RESULT.setLine(C1left); :}
				|
				(Bool) BOOL:B1 {: RESULT=new Bool(B1); RESULT.setLine(B1left); :}
				|
				(NewFactor) NEW Type:T1 {: RESULT=new NewFactor(T1); RESULT.setLine(T1left); :}
				|
				(NewFactorWithPars) NEW Type:T1 LSQBR Expr:E2 RSQBR {: RESULT=new NewFactorWithPars(T1, E2); RESULT.setLine(T1left); :}
				|
				(FactorWithExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorWithExpr(E1); RESULT.setLine(E1left); :}
				;
				
Relop			::= (Equals) EQEQ {: RESULT=new Equals(); :}
				|
				(NotEqual) NOTEQUAL {: RESULT=new NotEqual(); :}
				|
				(GreaterThan) GT {: RESULT=new GreaterThan(); :}
				|
				(GreaterOrEqual) GTE {: RESULT=new GreaterOrEqual(); :}
				|
				(LessThan) LT {: RESULT=new LessThan(); :}
				|
				(LessOrEqual) LTE {: RESULT=new LessOrEqual(); :}
				;

				
