package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONT, THIS, SUPER, GOTO, RECORD, PLUS, MINUS, MUL, DIV, MOD;
terminal EQEQ, NOTEQUAL, GT, GTE, LT, LTE, AND, OR, EQUAL, INC, DEC, SEMI, COLON, COMMA, DOT;
terminal LPAREN, RPAREN, LSQBR, RSQBR, LBRACE, RBRACE;
terminal Integer NUMBER;
terminal String BOOL;
terminal String IDENT;
terminal Character CHAR;

nonterminal Program Program;
nonterminal List List;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDeclWrapper ConstDeclWrapper;
nonterminal VarDeclWrapper VarDeclWrapper;
nonterminal ClassDeclList ClassDeclList;
nonterminal RecordDeclList RecordDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal Type Type;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal RecordDecl RecordDecl;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormPar FormPar;
nonterminal Statement Statement;
nonterminal SingleStatement SingleStatement;
nonterminal Statements Statements;
nonterminal Label Label;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Condition Condition;
nonterminal Expr Expr;
nonterminal ExprMore ExprMore;
nonterminal Designator Designator;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal CondTerm CondTerm;
nonterminal Addop Addop;
nonterminal Term Term;
nonterminal DesignatorArray DesignatorArray;
nonterminal CondFact CondFact;
nonterminal Mulop Mulop;
nonterminal Factor Factor;
nonterminal Relop Relop;

precedence left ELSE;

Program 		::= (Program) PROG IDENT:I1 List:L2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(I1, L2, M3); RESULT.setLine(I1left); :};

List 			::= (ListConst) List:L1 ConstDeclWrapper:C2 {: RESULT=new ListConst(L1, C2); RESULT.setLine(L1left); :}
				|
				(ListVar) List:L1 VarDeclWrapper:V2 {: RESULT=new ListVar(L1, V2); RESULT.setLine(L1left); :}
				|
				(ListClass) List:L1 ClassDecl:C2 {: RESULT=new ListClass(L1, C2); RESULT.setLine(L1left); :}
				|
				(ListRecord) List:L1 RecordDecl:R2 {: RESULT=new ListRecord(L1, R2); RESULT.setLine(L1left); :}
				|
				(NoList) {: RESULT=new NoList(); :} /* epsilon */
				;

MethodDeclList	::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;

ConstDeclWrapper ::= (ConstDeclWrapper) CONST Type:T1 ConstDeclList:C2 SEMI {: RESULT=new ConstDeclWrapper(T1, C2); RESULT.setLine(T1left); :};

ConstDeclList	::= (ConstDeclarations) ConstDeclList:C1 COMMA ConstDecl:C2 {: RESULT=new ConstDeclarations(C1, C2); RESULT.setLine(C1left); :}
				|
				(SingleConstDeclaration) ConstDecl:C1 {: RESULT=new SingleConstDeclaration(C1); RESULT.setLine(C1left); :}
				;

ConstDecl		::= (ConstDeclNumber) IDENT:I1 EQUAL NUMBER:N2 {: RESULT=new ConstDeclNumber(I1, N2); RESULT.setLine(I1left); :} 
				|
				(ConstDeclBool) IDENT:I1 EQUAL BOOL:B2 {: RESULT=new ConstDeclBool(I1, B2); RESULT.setLine(I1left); :}
				|
				(ConstDeclChar) IDENT:I1 EQUAL CHAR:C2 {: RESULT=new ConstDeclChar(I1, C2); RESULT.setLine(I1left); :} 
				;

VarDeclWrapper	::= (VarDeclWrapper) Type:T1 VarDeclList:V2 SEMI {: RESULT=new VarDeclWrapper(T1, V2); RESULT.setLine(T1left); :};

VarDeclList		::= (VarDeclarations) VarDeclList:V1 COMMA VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
				|
				(SingleVarDecl) VarDecl:V1 {: RESULT=new SingleVarDecl(V1); RESULT.setLine(V1left); :}
				;
				
VarDecl			::= (NormalVarDecl) IDENT:I1 {: RESULT=new NormalVarDecl(I1); RESULT.setLine(I1left); :}
				|
				(ArrayVarDecl) IDENT:I1 LSQBR RSQBR {: RESULT=new ArrayVarDecl(I1); RESULT.setLine(I1left); :}
				;

ClassDeclList	::= (ClassDeclList) ClassDeclList:C1 ClassDecl:C2 {: RESULT=new ClassDeclList(C1, C2); RESULT.setLine(C1left); :};

RecordDeclList	::= (RecordDeclList) RecordDeclList:R1 RecordDecl:R2 {: RESULT=new RecordDeclList(R1, R2); RESULT.setLine(R1left); :};

MethodDecl		::= (MethDeclParams) Type:T1 IDENT:I2 LPAREN FormPars:F3 RPAREN VarDeclWrapper:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethDeclParams(T1, I2, F3, V4, S5); RESULT.setLine(T1left); :}
				|
				(MethDeclNoParams) Type:T1 IDENT:I2 LPAREN RPAREN VarDeclWrapper:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethDeclNoParams(T1, I2, V3, S4); RESULT.setLine(T1left); :}
				|
				(MethDeclVoidParams) VOID IDENT:I1 LPAREN FormPars:F2 RPAREN VarDeclWrapper:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethDeclVoidParams(I1, F2, V3, S4); RESULT.setLine(I1left); :}
				|
				(MethDeclVoidNoParams) VOID IDENT:I1 LPAREN RPAREN VarDeclWrapper:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethDeclVoidNoParams(I1, V2, S3); RESULT.setLine(I1left); :}
				;

Type			::= (Type) IDENT:I1 {: RESULT=new Type(I1); RESULT.setLine(I1left); :};

ClassDecl		::= (ClassExtends) CLASS IDENT:I1 EXTENDS Type:T2 LBRACE VarDeclWrapper:V3 RBRACE {: RESULT=new ClassExtends(I1, T2, V3); RESULT.setLine(I1left); :}
				|
				(SimpleClassWithVars) CLASS IDENT:I1 LBRACE VarDeclWrapper:V2 RBRACE {: RESULT=new SimpleClassWithVars(I1, V2); RESULT.setLine(I1left); :}
				|
				(SimpleClass) CLASS IDENT:I1 LBRACE RBRACE {: RESULT=new SimpleClass(I1); RESULT.setLine(I1left); :}
				|
				(ClassExtendsWithVarsAndMethods) CLASS IDENT:I1 EXTENDS Type:T2 LBRACE VarDeclWrapper:V3 LBRACE MethodDeclList:M4 RBRACE RBRACE {: RESULT=new ClassExtendsWithVarsAndMethods(I1, T2, V3, M4); RESULT.setLine(I1left); :}
				|
				(ClassExtendsWithMethods) CLASS IDENT:I1 EXTENDS Type:T2 LBRACE LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClassExtendsWithMethods(I1, T2, M3); RESULT.setLine(I1left); :}
				|
				(ClassWithMethods) CLASS IDENT:I1 LBRACE VarDeclWrapper:V2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClassWithMethods(I1, V2, M3); RESULT.setLine(I1left); :}
				;
				
RecordDecl		::= (RecordDecl) RECORD IDENT:I1 LBRACE VarDeclWrapper:V2 RBRACE {: RESULT=new RecordDecl(I1, V2); RESULT.setLine(I1left); :};

FormPars		::= (FormParameters) FormPars:F1 COMMA FormPar:F2 {: RESULT=new FormParameters(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormPars) FormPar:F1 {: RESULT=new SingleFormPars(F1); RESULT.setLine(F1left); :}
				;

FormPar			::= (FormalParameter) Type:T1 IDENT:I2 {: RESULT=new FormalParameter(T1, I2); RESULT.setLine(T1left); :}
				|
				(FormalParameterArray) Type:T1 IDENT:I2 LSQBR RSQBR {: RESULT=new FormalParameterArray(T1, I2); RESULT.setLine(T1left); :}
				;
				
StatementList	::= (StatementListExists) StatementList:S1 Statement:S2 {: RESULT=new StatementListExists(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
				;

Statement		::= (StatementWithColon) Label:L1 COLON SingleStatement:S2 {: RESULT=new StatementWithColon(L1, S2); RESULT.setLine(L1left); :}
				|
				(StatementWithSingleStatement) SingleStatement:S1 {: RESULT=new StatementWithSingleStatement(S1); RESULT.setLine(S1left); :}
				|
				(StatementWithStatements) Statements:S1 {: RESULT=new StatementWithStatements(S1); RESULT.setLine(S1left); :}
				;
				
Label			::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

SingleStatement	::= (DesignatorSingleStatement) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorSingleStatement(D1); RESULT.setLine(D1left); :}
				|
				(IfElseSingleStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseSingleStatement(C1, S2, S3); RESULT.setLine(C1left); :}
				|
				(IfSingleStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IfSingleStatement(C1, S2); RESULT.setLine(C1left); :}
				|
				(DoWhileSingleStatement) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new DoWhileSingleStatement(S1, C2); RESULT.setLine(S1left); :}
				|
				(BreakSingleStatement) BREAK SEMI {: RESULT=new BreakSingleStatement(); :}
				|
				(ContinueSingleStatement) CONT SEMI {: RESULT=new ContinueSingleStatement(); :}
				|
				(ReturnExprSingleStatement) RETURN Expr:E1 SEMI {: RESULT=new ReturnExprSingleStatement(E1); RESULT.setLine(E1left); :}
				|
				(ReturnSingleStatement) RETURN SEMI {: RESULT=new ReturnSingleStatement(); :}
				|
				(ReadSingleStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadSingleStatement(D1); RESULT.setLine(D1left); :}
				|
				(PrintNumberSingleStatement) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintNumberSingleStatement(E1, N2); RESULT.setLine(E1left); :}
				|
				(PrintSingleStatement) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintSingleStatement(E1); RESULT.setLine(E1left); :}
				|
				(GotoSingleStatement) GOTO Label:L1 SEMI {: RESULT=new GotoSingleStatement(L1); RESULT.setLine(L1left); :}
				;
				
Statements		::= (Statements) LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :};

DesignatorStatement ::= (DesStmAssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesStmAssign(D1, A2, E3); RESULT.setLine(D1left); :}
					|
					(DesStmFuncParams) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesStmFuncParams(D1, A2); RESULT.setLine(D1left); :}
					|
					(DesStmFunc) Designator:D1 LPAREN RPAREN {: RESULT=new DesStmFunc(D1); RESULT.setLine(D1left); :}
					|
					(DesStmInc) Designator:D1 INC {: RESULT=new DesStmInc(D1); RESULT.setLine(D1left); :}
					|
					(DesStmDec) Designator:D1 DEC {: RESULT=new DesStmDec(D1); RESULT.setLine(D1left); :}
					;
					
Condition		::= (MultipleCondition) Condition:C1 OR CondTerm:C2 {: RESULT=new MultipleCondition(C1, C2); RESULT.setLine(C1left); :}
				|
				(SingleCondition) CondTerm:C1 {: RESULT=new SingleCondition(C1); RESULT.setLine(C1left); :}
				;
								
ExprMore		::= (ThereIsMoreExpr) ExprMore:E1 Addop:A2 Term:T3 {: RESULT=new ThereIsMoreExpr(E1, A2, T3); RESULT.setLine(E1left); :}
				|
				(NoMoreExpr) {: RESULT=new NoMoreExpr(); :} /* epsilon */
				;
		
Expr			::= (ExprNegative) MINUS Term:T1 ExprMore:E2 {: RESULT=new ExprNegative(T1, E2); RESULT.setLine(T1left); :}
				|
				(ExprPositive) Term:T1 ExprMore:E2 {: RESULT=new ExprPositive(T1, E2); RESULT.setLine(T1left); :}
				;
				
Addop			::= (Plus) PLUS {: RESULT=new Plus(); :}
				|
				(Minus) MINUS {: RESULT=new Minus(); :}
				;
				
Designator		::= (DesignatorDot) IDENT:I1 DOT Designator:D2 {: RESULT=new DesignatorDot(I1, D2); RESULT.setLine(I1left); :}
				|
				(DesignatorWithArr) IDENT:I1 DesignatorArray:D2 {: RESULT=new DesignatorWithArr(I1, D2); RESULT.setLine(I1left); :}
				;
	
DesignatorArray ::= (DesigArr) DesignatorArray:D1 LSQBR Expr:E2 RSQBR {: RESULT=new DesigArr(D1, E2); RESULT.setLine(D1left); :}
				|
				(NoDesgArr) {: RESULT=new NoDesgArr(); :} /* epsilon */
				;
				
Assignop		::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

ActPars			::= (MulActPars) ActPars:A1 COMMA Expr:E2 {: RESULT=new MulActPars(A1, E2); RESULT.setLine(A1left); :}
				|
				(SingleActPar) Expr:E1 {: RESULT=new SingleActPar(E1); RESULT.setLine(E1left); :}
				;

CondTerm		::= (MulCondTerm) CondTerm:C1 AND CondFact:C2 {: RESULT=new MulCondTerm(C1, C2); RESULT.setLine(C1left); :}
				|
				(SingleCondTerm) CondFact:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
				;

Term			::= (MultipleTerms) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MultipleTerms(T1, M2, F3); RESULT.setLine(T1left); :}
				|
				(SingleTerm) Factor:F1 {: RESULT=new SingleTerm(F1); RESULT.setLine(F1left); :}
				;
				
CondFact		::= (CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :}
				|
				(CondFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :}
				;
				
Mulop			::= (Multiply) MUL {: RESULT=new Multiply(); :}
				|
				(Divide) DIV {: RESULT=new Divide(); :}
				|
				(Mod) MOD {: RESULT=new Mod(); :}
				;
				
Factor			::= (NormalFactor) Designator:D1 {: RESULT=new NormalFactor(D1); RESULT.setLine(D1left); :}
				|
				(FactorWithActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorWithActPars(D1, A2); RESULT.setLine(D1left); :}
				|
				(FactorWithoutActPars) Designator:D1 LPAREN RPAREN {: RESULT=new FactorWithoutActPars(D1); RESULT.setLine(D1left); :}
				|
				(Num) NUMBER:N1 {: RESULT=new Num(N1); RESULT.setLine(N1left); :}
				|
				(Char) CHAR:C1 {: RESULT=new Char(C1); RESULT.setLine(C1left); :}
				|
				(Bool) BOOL:B1 {: RESULT=new Bool(B1); RESULT.setLine(B1left); :}
				|
				(NewFactor) NEW Type:T1 {: RESULT=new NewFactor(T1); RESULT.setLine(T1left); :}
				|
				(NewFactorWithPars) NEW Type:T1 LSQBR Expr:E2 RSQBR {: RESULT=new NewFactorWithPars(T1, E2); RESULT.setLine(T1left); :}
				|
				(FactorWithExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorWithExpr(E1); RESULT.setLine(E1left); :}
				;
				
Relop			::= (Equals) EQEQ {: RESULT=new Equals(); :}
				|
				(NotEqual) NOTEQUAL {: RESULT=new NotEqual(); :}
				|
				(GreaterThan) GT {: RESULT=new GreaterThan(); :}
				|
				(GreaterOrEqual) GTE {: RESULT=new GreaterOrEqual(); :}
				|
				(LessThan) LT {: RESULT=new LessThan(); :}
				|
				(LessOrEqual) LTE {: RESULT=new LessOrEqual(); :}
				;

				
