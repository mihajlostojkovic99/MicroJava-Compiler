package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONT, THIS, SUPER, GOTO, RECORD, PLUS, MINUS, MUL, DIV, MOD;
terminal EQEQ, NOTEQUAL, GT, GTE, LT, LTE, AND, OR, EQUAL, INC, DEC, SEMI, COLON, COMMA, DOT;
terminal LPAREN, RPAREN, LSQBR, RSQBR, LBRACE, RBRACE;
terminal Integer NUMBER;
terminal Integer BOOL;
terminal String IDENT;
terminal Character CHAR;
terminal CLASS;

nonterminal Program, List, MethodDeclList;
nonterminal ConstDeclWrapper, VarDeclWrapper, RecordDeclList;
nonterminal MethodDecl;
nonterminal ConstDeclList, ConstDecl;
nonterminal VarDeclList, VarDecl;
nonterminal RecordDecl;
nonterminal FormPars, StatementList;
nonterminal FormPar;
nonterminal Statement, SingleStatement, Statements, Label;
nonterminal DesignatorStatement;
nonterminal Assignop, ActPars;
nonterminal Addop;
nonterminal Mulop, Unary;
nonterminal Relop;
nonterminal ListVarDeclWrapper;

nonterminal ProgramName, RecordDeclName, DoWhileHelp, ActParsHelp, ElseHelp;

nonterminal rs.etf.pp1.symboltable.concepts.Struct AssignWrapper, Factor, FactorWrapper, Term, ExprMore, Expr, Condition, CondTerm, CondFact, Type;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorMore, DesignatorMoreElem, DesignatorArrName, DesignatorWithMoreName, MethodRet, MethodName;

precedence left ELSE;

Program 		::= (Program) PROG ProgramName List LBRACE MethodDeclList RBRACE;

ProgramName		::= (ProgramName) IDENT;

List 			::= (ListConst) List ConstDeclWrapper
				|
				(ListVar) List VarDeclWrapper
				|
				(ListRecord) List RecordDecl
				|
				(NoList) /* epsilon */
				;

MethodDeclList	::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;

ConstDeclWrapper ::= (ConstDeclWrapperClass) CONST Type ConstDeclList SEMI
				 |
				 (ConstDeclWrapperError) CONST error SEMI:l /* npr const ; ili const int ; */
				 {: parser.report_error("Recovering from error in constant declaration." + lleft, null); :}
				 ;

ConstDeclList	::= (ConstDeclarations) ConstDeclList COMMA ConstDecl
				|
				(SingleConstDeclaration) ConstDecl
				;

ConstDecl		::= (ConstDeclNumber) IDENT EQUAL NUMBER 
				|
				(ConstDeclBool) IDENT EQUAL BOOL
				|
				(ConstDeclChar) IDENT EQUAL CHAR
				|
				(ConstDeclError) error:l /* npr const int x y, z;*/
				 {: parser.report_error("Recovering from error in constant declaration. " + lleft, null); :}
				;

VarDeclWrapper	::= (VarDeclWrapperOk) Type VarDeclList SEMI
				|					
				(VarDeclWrapperError) error:l /* npr int ; */
				{: parser.report_error("Recovering from error in var declaration." + lleft, null); :}
				;

ListVarDeclWrapper ::= (IsListVarDeclWrapper) ListVarDeclWrapper VarDeclWrapper
				   |
				   (NoListVarDeclWrapper) /* epsilon */
				   ;

VarDeclList		::= (VarDeclarations) VarDeclList COMMA VarDecl
				|
				(SingleVarDecl) VarDecl
				|					
				(VarDeclError) error:l
				{: parser.report_error("Recovering from error in var declaration." + lleft, null); :}
				;
				
				
VarDecl			::= (NormalVarDecl) IDENT
				|
				(ArrayVarDecl) IDENT LSQBR RSQBR
				;

/*
RecordDeclList	::= (RecordDeclList) RecordDeclList RecordDecl
				|
				(SingleRecordDecl) RecordDecl
				;
*/

MethodDecl		::= (MethDeclParams) MethodRet MethodName LPAREN FormPars RPAREN ListVarDeclWrapper LBRACE StatementList RBRACE
				|
				(MethDeclNoParams) MethodRet MethodName LPAREN RPAREN ListVarDeclWrapper LBRACE StatementList RBRACE
				/*
				|
				(MethDeclParamsError) Type MethodName LPAREN error RPAREN:l ListVarDeclWrapper LBRACE StatementList RBRACE
				{: parser.report_error("Recovering from error in method formal parameters declaration. " + lleft, null); :}
				|
				(MethDeclVoidParamsError) VOID MethodName LPAREN error RPAREN:l ListVarDeclWrapper LBRACE StatementList RBRACE
				{: parser.report_error("Recovering from error in method formal parameters declaration. " + lleft, null); :}
				*/
				;
				
MethodName		::= (MethodName) IDENT;

MethodRet		::= (MethodRetVoid) VOID
				|
				(MethodRetType) Type
				;

Type			::= (Type) IDENT;
				
RecordDecl		::= (RecordDecl) RECORD RecordDeclName LBRACE ListVarDeclWrapper RBRACE;

RecordDeclName	::= (RecordDeclName) IDENT;

FormPars		::= (FormParameters) FormPars COMMA FormPar
				|
				(SingleFormPars) FormPar
				;

FormPar			::= (FormalParameter) Type IDENT
				|
				(FormalParameterArray) Type IDENT LSQBR RSQBR
				|
				(FormalParameterError) error:l
				{: parser.report_error("Recovering from error in method formal parameters declaration. " + lleft, null); :}
				;
				
StatementList	::= (StatementListExists) StatementList Statement
				|
				(NoStatementList) /* epsilon */
				;

Statement		::= (StatementWithLabel) Label COLON SingleStatement
				|
				(StatementWithSingleStatement) SingleStatement
				|
				(StatementWithStatements) Statements
				;
				
Label			::= (Label) IDENT;

DoWhileHelp		::= (DoWhileHelp) DO;

SingleStatement	::=(DesignatorSingleStatement) DesignatorStatement
				|
				(IfElseSingleStatement) IF LPAREN Condition RPAREN Statement ElseHelp Statement
				|
				(IfSingleStatement) IF LPAREN Condition RPAREN Statement
				/*
				|
				(IfSingleStatementError) IF LPAREN error RPAREN:l
				{: parser.report_error("Recovering from error in if condition. " + lleft, null); :}
				*/
				|
				(DoWhileSingleStatement) DoWhileHelp Statement WHILE LPAREN Condition RPAREN SEMI
				|
				(BreakSingleStatement) BREAK SEMI
				|
				(ContinueSingleStatement) CONT SEMI
				|
				(ReturnExprSingleStatement) RETURN Expr SEMI
				|
				(ReturnSingleStatement) RETURN SEMI
				|
				(ReadSingleStatement) READ LPAREN Designator RPAREN SEMI
				|
				(PrintNumberSingleStatement) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
				|
				(PrintSingleStatement) PRINT LPAREN Expr RPAREN SEMI
				|
				(GotoSingleStatement) GOTO IDENT SEMI
				;
				
ElseHelp		::= (ElseHelp) ELSE;
				
Statements		::= (Statements) LBRACE StatementList RBRACE;



DesignatorStatement ::= (DesStmAssign) Designator AssignWrapper
					|
					(DesStmFuncParams) Designator ActParsHelp ActPars RPAREN SEMI
					|
					(DesStmFunc) Designator LPAREN RPAREN SEMI
					|
					(DesStmInc) Designator INC SEMI
					|
					(DesStmDec) Designator DEC SEMI
					;
					
ActParsHelp			::= (ActParsHelp) LPAREN;
					
Condition		::= (MultipleCondition) Condition OR CondTerm
				|
				(SingleCondition) CondTerm
				
				|
				(ConditionError) error:l
				{: parser.report_error("Recovering from error in if condition. " + lleft, null); :}
				
				;
								
ExprMore		::= (ThereIsMoreExpr) ExprMore Addop Term
				|
				(NoMoreExpr) /* epsilon */
				;
		
Expr			::= (Expr) Term ExprMore;
				
Addop			::= (Plus) PLUS
				|
				(Minus) MINUS
				;
				
Designator		::= (DesignatorSimple) IDENT
				|
				(DesignatorArr) DesignatorArrName LSQBR Expr RSQBR
				|
				(DesignatorWithMore) DesignatorWithMoreName DesignatorMore
				|
				(DesignatorArrWithMore) DesignatorMoreElem DesignatorMore
				;
				
DesignatorArrName ::= (DesignatorArrName) IDENT;

DesignatorWithMoreName ::= (DesignatorWithMoreName) IDENT;

DesignatorMoreElem ::= (DesignatorMoreElem) DesignatorArrName LSQBR Expr RSQBR;
	
DesignatorMore ::= (DesigMoreDot) DOT IDENT
				|
				(DesigMoreDotArr) DOT DesignatorArrName LSQBR Expr RSQBR
				|
				(DesigMoreDotList) DesignatorMore DOT IDENT
				|
				(DesigMoreDotArrList) DesignatorMore DOT DesignatorArrName LSQBR Expr RSQBR
				;
				
Assignop		::= (Assignop) EQUAL;

/* 
	ASSIGN WRAPPER JE POTENCIJALNO LOSA IDEJA ZA TRECU FAZU! AKO NE BUDE MOGLO VRATI ASSIGNOP U DESIGNATOR STATEMENT
   	I STAVI SAMO U SINGLESTATEMENT ERROR SEMI :( 
 */

AssignWrapper	::= (AssignWrap) Assignop Expr SEMI
				|
				(AssignWrapperError) error SEMI:l
				{: parser.report_error("Recovering from error in assignement. " + lleft, null); :}
				;

ActPars			::= (MulActPars) ActPars COMMA Expr
				|
				(SingleActPar) Expr
				;

CondTerm		::= (MulCondTerm) CondTerm AND CondFact
				|
				(SingleCondTerm) CondFact
				;

Term			::= (MulTerms) Term Mulop FactorWrapper
				|
				(SingleTerm) FactorWrapper
				;
				
CondFact		::= (CondFactExpr) Expr
				|
				(CondFactRelop) Expr Relop Expr
				;
				
Mulop			::= (Multiply) MUL
				|
				(Divide) DIV
				|
				(Mod) MOD
				;

FactorWrapper	::= (FactorWrapper) Unary Factor;

Unary			::= (UnaryNegative) MINUS
				|
				(NoUnary) /* epsilon */
				;

Factor			::= (NormalFactor) Designator
				|
				(FactorWithActPars) Designator ActParsHelp ActPars RPAREN
				|
				(FactorWithoutActPars) Designator LPAREN RPAREN
				|
				(Num) NUMBER
				|
				(Char) CHAR
				|
				(Bool) BOOL
				|
				(NewFactor) NEW Type
				|
				(NewFactorWithPars) NEW Type LSQBR Expr RSQBR
				|
				(FactorWithExpr) LPAREN Expr RPAREN
				;
				
Relop			::= (Equals) EQEQ
				|
				(NotEqual) NOTEQUAL
				|
				(GreaterThan) GT
				|
				(GreaterOrEqual) GTE
				|
				(LessThan) LT
				|
				(LessOrEqual) LTE
				;

				
