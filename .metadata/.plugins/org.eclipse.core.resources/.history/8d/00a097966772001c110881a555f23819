package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONT, THIS, SUPER, GOTO, RECORD, PLUS, MINUS, MUL, DIV, MOD;
terminal EQEQ, NOTEQUAL, GT, GTE, LT, LTE, AND, OR, EQUAL, INC, DEC, SEMI, COLON, COMMA, DOT;
terminal LPAREN, RPAREN, LSQBR, RSQBR, LBRACE, RBRACE;
terminal Integer NUMBER;
terminal String BOOL;
terminal String IDENT;
terminal Character CHAR;

nonterminal Program, List, MethodDeclList;
nonterminal ConstDeclWrapper, VarDeclWrapper, ClassDeclList, RecordDeclList;
nonterminal MethodDecl;
nonterminal Type, ConstDeclList, ConstDecl;
nonterminal VarDeclList, VarDecl;
nonterminal ClassDecl;
nonterminal RecordDecl;
nonterminal FormPars, StatementList;
nonterminal FormPar;
nonterminal Statement, SingleStatement, Statements, Label;
nonterminal DesignatorStatement, Condition, Expr, ExprMore, Designator;
nonterminal Assignop, ActPars;
nonterminal CondTerm;
nonterminal Addop, Term;
nonterminal DesignatorArray;
nonterminal CondFact;
nonterminal Mulop, Factor;
nonterminal Relop;

precedence left ELSE;

Program 		::= (Program) PROG IDENT List LBRACE MethodDeclList RBRACE;

List 			::= (ListConst) List ConstDeclWrapper
				|
				(ListVar) List VarDeclWrapper
				|
				(ListClass) List ClassDeclList
				|
				(ListRecord) List RecordDeclList
				;

MethodDeclList	::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;

ConstDeclWrapper ::= (ConstDeclarationWrapper) ConstDeclWrapper CONST Type ConstDeclList SEMI;
				 | 
				 (NoConstDeclWrapper) /* epsilon */

ConstDeclList	::= (ConstDeclarations) ConstDeclList COMMA ConstDecl
				|
				(SingleConstDeclaration) ConstDecl
				;

ConstDecl		::= (ConstDeclNumber) IDENT EQUAL NUMBER 
				|
				(ConstDeclBool) IDENT EQUAL BOOL
				|
				(ConstDeclChar) IDENT EQUAL CHAR 
				;

VarDeclWrapper	::= (VarDeclarationWrapper) VarDeclWrapper Type VarDeclList SEMI;
				|
				(NoVarDeclWrapper) /* epsilon */

VarDeclList		::= (VarDeclarations) VarDeclList COMMA VarDecl
				|
				(SingleVarDecl) VarDecl
				;
				
VarDecl			::= (NormalVarDecl) IDENT
				|
				(ArrayVarDecl) IDENT LSQBR RSQBR
				;

ClassDeclList	::= (ClassDeclList) ClassDeclList ClassDecl;

RecordDeclList	::= (RecordDeclList) RecordDeclList RecordDecl;

MethodDecl		::= (MethDeclParams) Type IDENT LPAREN FormPars RPAREN VarDeclWrapper LBRACE StatementList RBRACE
				|
				(MethDeclParamsNoVars) Type IDENT LPAREN FormPars RPAREN LBRACE StatementList RBRACE
				|
				(MethDeclNoParams) Type IDENT LPAREN RPAREN VarDeclWrapper LBRACE StatementList RBRACE
				|
				(MethDeclNoParamsNoVars) Type IDENT LPAREN RPAREN LBRACE StatementList RBRACE
				|
				(MethDeclVoidParams) VOID IDENT LPAREN FormPars RPAREN VarDeclWrapper LBRACE StatementList RBRACE
				|
				(MethDeclVoidParamsNoVars) VOID IDENT LPAREN FormPars RPAREN LBRACE StatementList RBRACE
				|
				(MethDeclVoidNoParams) VOID IDENT LPAREN RPAREN VarDeclWrapper LBRACE StatementList RBRACE
				|
				(MethDeclVoidNoParamsNoVars) VOID IDENT LPAREN RPAREN LBRACE StatementList RBRACE
				;

Type			::= (Type) IDENT;

ClassDecl		::= (ClassExtends) CLASS IDENT EXTENDS Type LBRACE VarDeclWrapper RBRACE
				|
				(SimpleClassWithVars) CLASS IDENT LBRACE VarDeclWrapper RBRACE
				|
				(SimpleClass) CLASS IDENT LBRACE RBRACE
				|
				(ClassExtendsWithVarsAndMethods) CLASS IDENT EXTENDS Type LBRACE VarDeclWrapper LBRACE MethodDeclList RBRACE RBRACE
				|
				(ClassExtendsWithMethods) CLASS IDENT EXTENDS Type LBRACE LBRACE MethodDeclList RBRACE RBRACE
				|
				(ClassWithVarsAndMethods) CLASS IDENT LBRACE VarDeclWrapper LBRACE MethodDeclList RBRACE RBRACE
				;
				
RecordDecl		::= (RecordDeclWithVars) RECORD IDENT LBRACE VarDeclWrapper RBRACE
				|
				(RecordDeclNoVars) RECORD IDENT LBRACE RBRACE;

FormPars		::= (FormParameters) FormPars COMMA FormPar
				|
				(SingleFormPars) FormPar
				;

FormPar			::= (FormalParameter) Type IDENT
				|
				(FormalParameterArray) Type IDENT LSQBR RSQBR
				;
				
StatementList	::= (StatementListExists) StatementList Statement
				|
				(NoStatementList) /* epsilon */
				;

Statement		::= (StatementWithColon) Label COLON SingleStatement
				|
				(StatementWithSingleStatement) SingleStatement
				|
				(StatementWithStatements) Statements
				;
				
Label			::= (Label) IDENT;

SingleStatement	::= (DesignatorSingleStatement) DesignatorStatement SEMI
				|
				(IfElseSingleStatement) IF LPAREN Condition RPAREN Statement ELSE Statement
				|
				(IfSingleStatement) IF LPAREN Condition RPAREN Statement
				|
				(DoWhileSingleStatement) DO Statement WHILE LPAREN Condition RPAREN SEMI
				|
				(BreakSingleStatement) BREAK SEMI
				|
				(ContinueSingleStatement) CONT SEMI
				|
				(ReturnExprSingleStatement) RETURN Expr SEMI
				|
				(ReturnSingleStatement) RETURN SEMI
				|
				(ReadSingleStatement) READ LPAREN Designator RPAREN SEMI
				|
				(PrintNumberSingleStatement) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
				|
				(PrintSingleStatement) PRINT LPAREN Expr RPAREN SEMI
				|
				(GotoSingleStatement) GOTO Label SEMI
				;
				
Statements		::= (Statements) LBRACE StatementList RBRACE;

DesignatorStatement ::= (DesStmAssign) Designator Assignop Expr
					|
					(DesStmFuncParams) Designator LPAREN ActPars RPAREN
					|
					(DesStmFunc) Designator LPAREN RPAREN
					|
					(DesStmInc) Designator INC
					|
					(DesStmDec) Designator DEC
					;
					
Condition		::= (MultipleCondition) Condition OR CondTerm
				|
				(SingleCondition) CondTerm
				;
								
ExprMore		::= (ThereIsMoreExpr) ExprMore Addop Term
				|
				(NoMoreExpr) /* epsilon */
				;
		
Expr			::= (ExprNegative) MINUS Term ExprMore
				|
				(ExprPositive) Term ExprMore
				;
				
Addop			::= (Plus) PLUS
				|
				(Minus) MINUS
				;
				
Designator		::= (DesignatorDot) IDENT DOT Designator
				|
				(DesignatorWithArr) IDENT DesignatorArray
				;
	
DesignatorArray ::= (DesigArr) DesignatorArray LSQBR Expr RSQBR
				|
				(NoDesgArr) /* epsilon */
				;
				
Assignop		::= (Assignop) EQUAL;

ActPars			::= (MulActPars) ActPars COMMA Expr
				|
				(SingleActPar) Expr
				;

CondTerm		::= (MulCondTerm) CondTerm AND CondFact
				|
				(SingleCondTerm) CondFact
				;

Term			::= (MultipleTerms) Term Mulop Factor
				|
				(SingleTerm) Factor
				;
				
CondFact		::= (CondFactExpr) Expr
				|
				(CondFactRelop) Expr Relop Expr
				;
				
Mulop			::= (Multiply) MUL
				|
				(Divide) DIV
				|
				(Mod) MOD
				;
				
Factor			::= (NormalFactor) Designator
				|
				(FactorWithActPars) Designator LPAREN ActPars RPAREN
				|
				(FactorWithoutActPars) Designator LPAREN RPAREN
				|
				(Num) NUMBER
				|
				(Char) CHAR
				|
				(Bool) BOOL
				|
				(NewFactor) NEW Type
				|
				(NewFactorWithPars) NEW Type LSQBR Expr RSQBR
				|
				(FactorWithExpr) LPAREN Expr RPAREN
				;
				
Relop			::= (Equals) EQEQ
				|
				(NotEqual) NOTEQUAL
				|
				(GreaterThan) GT
				|
				(GreaterOrEqual) GTE
				|
				(LessThan) LT
				|
				(LessOrEqual) LTE
				;

				
