package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, IDENT, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONT, THIS, SUPER, GOTO, RECORD, PLUS, MINUS, MUL, DIV, MOD;
terminal EQEQ, NOTEQUAL, GT, GTE, LT, LTE, AND, OR, EQUAL, INC, DEC, SEMI, COLON, COMMA, DOT;
terminal LPAREN, RPAREN, LSQBR, RSQBR, LBRACE, RBRACE;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal Program, List, MethodDeclList;
nonterminal ConstDeclWrapper, VarDeclWrapper, ClassDeclList, RecordDeclList;
nonterminal MethodDecl;
nonterminal Type, ConstDeclList, ConstDecl;
nonterminal VarDeclList, VarDecl;
nonterminal ClassDecl;
nonterminal RecordDecl;
nonterminal FormPars, StatementList;
nonterminal ConstructorDecl;
nonterminal FormPar;
nonterminal Statement, SingleStatement, Statements;
nonterminal DesignatorStatement, Condition, Expr, Designator;
nonterminal Assignop, ActPars;
nonterminal CondTerm;
nonterminal Addop, Term;
nonterminal DesignatorArray;
nonterminal CondFact;
nonterminal Mulop, Factor;
nonterminal Relop;

Program 		::= (Program) PROG IDENT List LBRACE MethodDeclList RBRACE;

List 			::= (ListConst) List ConstDeclWrapper
				|
				(ListVar) List VarDeclWrapper
				|
				(ListClass) List ClassDeclList
				|
				(ListRecord) List RecordDeclList
				|
				(NoList) /* epsilon */
				;

MethodDeclList	::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;

ConstDeclWrapper ::= (ConstDeclWrapper) CONST Type ConstDeclList SEMI;

ConstDeclList	::= (ConstDeclarations) ConstDeclList COMMA ConstDecl
				|
				(SingleConstDeclaration) ConstDecl
				;

ConstDecl		::= (ConstDeclNumber) IDENT EQUAL NUMBER 
				|
				(ConstDeclBool) IDENT EQUAL BOOL
				|
				(ConstDeclChar) IDENT EQUAL CHAR 
				;

VarDeclWrapper	::= (VarDeclWrapper) Type VarDeclList SEMI;

VarDeclList		::= (VarDeclarations) VarDeclList COMMA VarDecl
				|
				(SingleVarDecl) VarDecl
				;
				
VarDecl			::= (NormalVarDecl) IDENT
				|
				(ArrayVarDecl) IDENT LSQBR RSQBR
				;

ClassDeclList	::= (ClassDeclList) ClassDeclList ClassDecl;

RecordDeclList	::= (RecordDeclList) RecordDeclList RecordDecl;

MethodDecl		::= Type IDENT LPAREN FormPars RPAREN VarDeclWrapper LBRACE StatementList RBRACE
				|
				Type IDENT LPAREN RPAREN VarDeclWrapper LBRACE StatementList RBRACE
				|
				VOID IDENT LPAREN FormPars RPAREN VarDeclWrapper LBRACE StatementList RBRACE
				|
				VOID IDENT LPAREN RPAREN VarDeclWrapper LBRACE StatementList RBRACE
				;

Type			::= (Type) IDENT;

ClassDecl		::= CLASS IDENT EXTENDS Type LBRACE VarDeclWrapper RBRACE
				|
				CLASS IDENT LBRACE VarDeclWrapper RBRACE
				|
				CLASS IDENT EXTENDS Type LBRACE VarDeclWrapper LBRACE MethodDeclList RBRACE RBRACE
				|
				CLASS IDENT LBRACE VarDeclWrapper LBRACE MethodDeclList RBRACE RBRACE
				;
				
RecordDecl		::= RECORD IDENT LBRACE VarDeclWrapper RBRACE;

FormPars		::= FormPars COMMA FormPar
				|
				FormPar
				;

FormPar			::= Type IDENT
				|
				Type IDENT LSQBR RSQBR
				;
				
StatementList	::= StatementList Statement
				|
				/* epsilon */
				;

Statement		::= Label COLON SingleStatement
				|
				SingleStatement
				|
				Statements
				;
				
Label			::= IDENT;

SingleStatement	::= DesignatorStatement SEMI
				|
				IF LPAREN Condition RPAREN Statement ELSE Statement
				|
				IF LPAREN Condition RPAREN Statement
				|
				DO Statement WHILE LPAREN Condition RPAREN SEMI
				|
				BREAK SEMI
				|
				CONTINUE SEMI
				|
				RETURN Expr SEMI
				|
				RETURN SEMI
				|
				READ LPAREN Designator RPAREN SEMI
				|
				PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
				|
				PRINT LPAREN Expr RPAREN SEMI
				|
				GOTO Label SEMI
				;
				
Statements		::= LBRACE StatementList RBRACE;

DesignatorStatement ::= Designator Assignop Expr
					|
					Designator LPAREN ActPars RPAREN
					|
					Designator LPAREN RPAREN
					|
					Designator INC
					|
					Designator DEC
					;
					
Condition		::= Condition OR CondTerm
				|
				CondTerm
				;
								
Expr			::= MINUS Expr Addop Term
				|
				Expr Addop Term
				|
				Term
				|
				MINUS Term
				;
				
Designator		::= IDENT DOT Designator
				|
				IDENT DesignatorArray
				|
				LSQBR Expr RSQBR
				|
				IDENT
				;
	
DesignatorArray ::= DesignatorArray LSQBR Expr RSQBR
				|
				/* epsilon */
				;
				
Assignop		::= EQUAL;

ActPars			::= ActPars COMMA Expr
				|
				Expr
				;

CondTerm		::= CondTerm AND CondFact
				|
				CondFact
				;

Term			::= Term Mulop Factor
				|
				Factor
				;
				
CondFact		::= Expr
				|
				Expr Relop Expr
				;
				
Mulop			::= MUL
				|
				DIV
				|
				MOD
				;
				
Factor			::= Designator
				|
				Designator LPAREN ActPars RPAREN
				|
				Designator LPAREN RPAREN
				|
				NUMBER
				|
				CHAR
				|
				BOOL
				|
				NEW Type
				|
				NEW Type LSQBR Expr RSQBR
				|
				LPAREN Expr RPAREN
				;
				
Relop			::= EQEQ
				|
				NOTEQUAL
				|
				GT
				|
				GTE
				|
				LT
				|
				LTE
				;

				
