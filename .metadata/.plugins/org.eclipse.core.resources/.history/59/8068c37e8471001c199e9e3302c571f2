package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, IDENT, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONT, THIS, SUPER, GOTO, RECORD, PLUS, MINUS, MUL, DIV, MOD;
terminal EQEQ, NOTEQUAL, GT, GTE, LT, LTE, AND, OR, EQUAL, INC, DEC, SEMI, COLON, COMMA, DOT;
terminal LPAREN, RPAREN, LSQBR, RSQBR, LBRACE, RBRACE;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal Program, List, MethodDecl, ConstDeclList, VarDeclList, ClassDeclList, RecordDeclList;

Program 		::= (Program) PROG IDENT List LBRACE MethodDecl RBRACE;

List 			::= (ListConst) List ConstDeclList
				|
				(ListVar) List VarDeclList
				|
				(ListClass) List ClassDeclList
				|
				(ListRecord) List RecordDeclList
				|
				(NoList) /* epsilon */
				;

ConstDeclList	::= ConstDeclList COMMA IDENT ConstDecl

ConstDecl		::= CONST Type IDENT EQUAL NUMBER 
				|
				CONST Type IDENT EQUAL BOOL
				|
				CONST Type IDENT EQUAL CHAR 


